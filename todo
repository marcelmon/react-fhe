updated todo (june 25, 2018)


complete FHE py (cmult, cadd)

link FHE py with node (via django calls or other(db))

implement fhe spark api in py

FHE+FHE spark API using django

test/debug spark logic for xnor search

build user/collections database

complete front end html/css

open server on aws, setup containers

add user/collections management features

build demo/runthrough

_________________________________


fix string instead of clickedDataCtextOject bug
fix TypeError: right-hand side of 'in' should be an object, got string at 151



more react research:

	research react data management -?redux?

	research react table library (to refactor)

	research css styles

	research more react libraries (for each component)

	research more react design patterns


react/backend research/decisions:

	decide on html

	decide on css

	decide on back/front end stack

		decide on database:
			user account - can be via library
			user collection
			ctext

		language(s) and frameworks:
			how to integrate with python/c++ functions best

			controllers/mvc or flux or redux?

		how to parse/store ctext (serialize as xml => can parse easily for display (send as json or xml))

		how to connect different services

		any user security logic?

		any ssl/system config?


build api endpoints (start with interfaces):
	
	/fhe
		/fhe/cryptocontext
			Generate a crypto context.

			Params:
				CryptoParams (will have default)
			Return: 
				serialized cryptocontext and/or
				insert into database and/or
				save in memory

		/fhe/keygen
			Generate public and private key pairs. Also need to generate EvalMult key and return new cryptocontext.
			Param:
				cryptocontext (as serialized or use a uid,ccid)
			Return:
				Json Object with new CC and KeyPair (serialized)

		/fhe/encrypt
			Encrypt values using particular cc
			Param:
				Plaintext
				Json Object of Plaintext
				cryptocontext (as serialized or use a uid,ccid)
			Return as: 
				http file
				insert into database ad return an id
				save in memory

		/fhe/decrypt
			Decrypt given ciphertext using given cc.
			Params:
				ciphertext (as text or db id or shared memory id)
				cryptocontext (as text or db id or shared memory id)
			Return as:
				http file



/useraccounts/{userId}/new/
/useraccounts/{userId}/update/
/useraccounts/{userId}/delete/

/userlogin/{userId}/login/
/userlogin/{userId}/logout/


/userdata/{userId}/collections/new/
/userdata/{userId}/collections/get/{collectionId}/
/userdata/{userId}/collections/delete/{collectionId}

/userdata/{userId}/plaintext/new/
/userdata/{userId}/plaintext/get/{collectionId}/{plaintextId}/
/userdata/{userId}/plaintext/delete/{collectionId}/{plaintextId}/

/userdata/{userId}/cryptocontext/new/
/userdata/{userId}/cryptocontext/get	/{cryptocontextId}
/userdata/{userId}/cryptocontext/get	/{cryptocontextId} 		/publickeys
/userdata/{userId}/cryptocontext/get	/{cryptocontextId} 		/publickeys/delete{publickeyid}
/userdata/{userId}/cryptocontext/delete /{cryptocontextId}

/userdata/{userId}/keypairs/new/{cryptocontextId}/
/userdata/{userId}/keypairs/get/{cryptocontextId}/both/{keypairId}/
/userdata/{userId}/keypairs/get/{cryptocontextId}/publickey/{keypairId}/
/userdata/{userId}/keypairs/get/{cryptocontextId}/privatekey/{keypairId}/
/userdata/{userId}/keypairs/delete/{cryptocontextId}/{keypairId}/

/userdata/{userId}/ciphertext/new/{cryptocontextId}/{keypairId}/{collectionId}/{plaintextId}/
/userdata/{userId}/ciphertext/get/{cryptocontextId}/{keypairId}/{collectionId}/{ciphertextId}/
/userdata/{userId}/ciphertext/delete/{cryptocontextId}/{keypairId}/{collectionId}/{ciphertextId}/



	/user/collections
	/user/collections/cryptocontext
	/user/collections/new
	/user/collections/delete
	/user/collections/rename
	/user/collections/plaintext
	/user/collections/ctext



	/user
	/user/new
	/user/login
	/user/logout
	/user/delete

	/user/account
	/user/account/update

	/user/collections
	/user/collections/cryptocontext
	/user/collections/new
	/user/collections/delete
	/user/collections/rename
	/user/collections/plaintext
	/user/collections/ctext

	/fhe
	/fhe/cryptocontext
	/fhe/encrypt
	/fhe/decrypt

	/external
	/external/status
	/external/query
	/external/query/status
	/external/query/cancel
	/external/query/cmult
	/external/query/cadd
	/external/query/function

complete the view(react components):

	build react login

	build react user management

	build react collections management

	build react data viewer

	build react fhe

	build react external


setup external service:

	container - kernel config

	spark config

	listening server setup


build external service endpoints:
	/status 		// see if the service is running

	/query
	/query/status
	/query/cancel
	/query/cmult
	/query/cadd
	/query/function // for complete functional upload (like xnor search over all values)
		Need to finish the spark config
	
setup on ec2